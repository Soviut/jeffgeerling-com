<?php

/**
 * @file
 * Custom email functionality for JeffGeerling.com.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Component\Utility\Unicode;
use Drupal\Core\Url;

/**
 * Implements hook_theme().
 */
function custom_mail_theme($existing, $type, $theme, $path) {
  return [
    'comment_email' => [
      'variables' => [
        'comment' => '',
        'name' => '',
        'node_url' => '',
        'comment_url' => '',
        'delete_url' => ''
      ],
    ],
  ];
}

/**
 * Implements hook_comment_insert().
 */
function custom_mail_comment_insert(EntityInterface $comment) {
  // Don't send emails when site owner posts.
  if ($comment->getOwnerId() == 1) {
    return;
  }

  // Set the comment status for subject line.
  $comment_status = $comment->getStatus ? t('APPROVED') : t('AWAITING MODERATION');

  // Make username fit in subject better.
  $name = _custom_mail_prepare_username($comment->getAuthorName());

  // Prepare the email subject.
  $subject = t('Comment by @name posted to www.jeffgeerling.com - @status', [
    '@name' => $name,
    '@status' => $comment_status,
  ]);

  // Get the node for the comment and generate link URLs.
  $comment_url = Url::fromRoute('entity.comment.canonical', ['comment' => $comment->id()]);
  $node_url = Url::fromRoute('entity.node.canonical', ['node' => $comment->getCommentedEntityId()]);
  $delete_url = Url::fromRoute('entity.comment.delete_form', ['comment' => $comment->id()]);

  // Render the email body.
  $renderable = [
    '#theme' => 'comment_email',
    '#comment' => $comment,
    '#name' => $name,
    '#node_url' => $node_url->setAbsolute(),
    '#comment_url' => $comment_url->setAbsolute(),
    '#delete_url' => $delete_url->setAbsolute(),
  ];
  $body = \Drupal::service('renderer')->renderPlain($renderable);

  // Send the email.
  $site_mail = \Drupal::config('system.site')->get('mail');
  simple_mail_queue('JeffGeerling.com <' . $site_mail . '>', $site_mail, (string) $subject, $body);
}

/**
 * Sanitize and truncate a username to 24 characters or less.
 *
 * @param string $name
 *   A username.
 *
 * @return string
 *   A prepared username.
 */
function _custom_mail_prepare_username($name = '') {
  if (Unicode::strlen($name) > 24) {
    $name = Unicode::substr($name, 0, 20) . '...';
  }
  return $name;
}
